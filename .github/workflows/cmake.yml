name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setting0
      run: pip install conan
      
    - name: Setting1
      run: conan profile new default --detect --force
      
    - name: Setting2
      run: conan profile update settings.compiler.libcxx=libstdc++11 default
      
    - name: Setting3
      run: mkdir build && cd build

    - name: Setting4
      run: conan install ${{github.workspace}}
      
      
    - name: Setting6
      #run: cmake .. -DCMAKE_BUILD_TYPE=Release
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Setting7
      run: cmake --build ${{github.workspace}}
     
    - name: Setting8
      run: bin/sleep

    # - name: Configure CMake
      # # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    # - name: Build
      # # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}
      # Execute tests defined by the CMake configuration.
      run: ctest -C ${{env.BUILD_TYPE}}

    - uses: actions/upload-artifact@v3
      with:
      name: my-artifact
      path: ${{github.workspace}} # or path/to/artifact
